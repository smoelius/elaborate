// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;





pub fn panic_any < M : 'static + core :: any :: Any + core :: marker :: Send > ( msg : M ) -> ! {

    std :: panic :: panic_any(msg)
}
pub fn resume_unwind ( payload : std :: boxed :: Box < ( dyn core :: any :: Any + core :: marker :: Send ) > ) -> ! {

    std :: panic :: resume_unwind(payload)
}
pub fn set_hook ( hook : std :: boxed :: Box < ( dyn core :: ops :: Fn ( & std :: panic :: PanicHookInfo < '_ > ) + core :: marker :: Sync + core :: marker :: Send + 'static ) > ) {

    std :: panic :: set_hook(hook)
}
pub fn take_hook ( ) -> std :: boxed :: Box < ( dyn core :: ops :: Fn ( & std :: panic :: PanicHookInfo < '_ > ) + core :: marker :: Sync + core :: marker :: Send + 'static ) > {

    std :: panic :: take_hook()
}
#[cfg(feature = "panic_always_abort")]
pub fn always_abort ( ) {

    std :: panic :: always_abort()
}
#[cfg(feature = "panic_backtrace_config")]
pub fn get_backtrace_style ( ) -> crate :: rewrite_output_type ! ( core :: option :: Option < std :: panic :: BacktraceStyle > ) {

    std :: panic :: get_backtrace_style()
        .map(Into::into)
        .with_context(|| crate::call_failed!(None::<()>, "std :: panic :: get_backtrace_style"))
}
#[cfg(feature = "panic_backtrace_config")]
pub fn set_backtrace_style ( style : std :: panic :: BacktraceStyle ) {

    std :: panic :: set_backtrace_style(style)
}
#[cfg(feature = "panic_update_hook")]
pub fn update_hook < F > ( hook_fn : F ) where F : core :: ops :: Fn ( & ( dyn core :: ops :: Fn ( & std :: panic :: PanicHookInfo < '_ > ) + core :: marker :: Send + core :: marker :: Sync + 'static ) , & std :: panic :: PanicHookInfo < '_ > ) + core :: marker :: Sync + core :: marker :: Send + 'static {

    std :: panic :: update_hook(hook_fn)
}
