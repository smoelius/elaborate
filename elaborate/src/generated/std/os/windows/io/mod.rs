// This file was automatically generated by `elaborate`.
// https://github.com/smoelius/elaborate

#[allow(unused_imports)]
use anyhow::Context;



#[cfg(windows)]
#[repr(transparent)]
pub struct BorrowedHandle < 'a > {
    pub(crate) inner: std :: os :: windows :: io :: BorrowedHandle < 'a >,
}
#[cfg(windows)]
impl<'a> BorrowedHandle < 'a > {
    pub fn to_inner(&self) -> &std :: os :: windows :: io :: BorrowedHandle < 'a > {
        &self.inner
    }
}
#[cfg(windows)]
impl<'a> BorrowedHandle < 'a > {
    pub fn into_inner(self) -> std :: os :: windows :: io :: BorrowedHandle < 'a > {
        self.inner
    }
}
#[cfg(windows)]
impl<'a, T: ?Sized> AsRef<T> for BorrowedHandle < 'a >
where
    std :: os :: windows :: io :: BorrowedHandle < 'a >: AsRef<T>,
{
    fn as_ref(&self) -> &T {
        <std :: os :: windows :: io :: BorrowedHandle < 'a > as AsRef<T>>::as_ref(&self.inner)
    }
}
#[cfg(windows)]
impl<'a> From<std :: os :: windows :: io :: BorrowedHandle < 'a >> for BorrowedHandle < 'a > {
    fn from(value: std :: os :: windows :: io :: BorrowedHandle < 'a >) -> Self {
        Self { inner: value }
    }
}
#[cfg(windows)]
impl<'a> crate::Elaborate for std :: os :: windows :: io :: BorrowedHandle < 'a > {
    type Output = BorrowedHandle < 'a >;
    fn elaborate(self) -> Self::Output {
        self.into()
    }
}
#[cfg(windows)]
#[repr(transparent)]
pub struct BorrowedSocket < 'a > {
    pub(crate) inner: std :: os :: windows :: io :: BorrowedSocket < 'a >,
}
#[cfg(windows)]
impl<'a> BorrowedSocket < 'a > {
    pub fn to_inner(&self) -> &std :: os :: windows :: io :: BorrowedSocket < 'a > {
        &self.inner
    }
}
#[cfg(windows)]
impl<'a> BorrowedSocket < 'a > {
    pub fn into_inner(self) -> std :: os :: windows :: io :: BorrowedSocket < 'a > {
        self.inner
    }
}
#[cfg(windows)]
impl<'a, T: ?Sized> AsRef<T> for BorrowedSocket < 'a >
where
    std :: os :: windows :: io :: BorrowedSocket < 'a >: AsRef<T>,
{
    fn as_ref(&self) -> &T {
        <std :: os :: windows :: io :: BorrowedSocket < 'a > as AsRef<T>>::as_ref(&self.inner)
    }
}
#[cfg(windows)]
impl<'a> From<std :: os :: windows :: io :: BorrowedSocket < 'a >> for BorrowedSocket < 'a > {
    fn from(value: std :: os :: windows :: io :: BorrowedSocket < 'a >) -> Self {
        Self { inner: value }
    }
}
#[cfg(windows)]
impl<'a> crate::Elaborate for std :: os :: windows :: io :: BorrowedSocket < 'a > {
    type Output = BorrowedSocket < 'a >;
    fn elaborate(self) -> Self::Output {
        self.into()
    }
}
#[cfg(windows)]
#[repr(transparent)]
pub struct OwnedHandle {
    pub(crate) inner: std :: os :: windows :: io :: OwnedHandle,
}
#[cfg(windows)]
impl OwnedHandle {
    pub fn to_inner(&self) -> &std :: os :: windows :: io :: OwnedHandle {
        &self.inner
    }
}
#[cfg(windows)]
impl OwnedHandle {
    pub fn into_inner(self) -> std :: os :: windows :: io :: OwnedHandle {
        self.inner
    }
}
#[cfg(windows)]
impl<T: ?Sized> AsRef<T> for OwnedHandle
where
    std :: os :: windows :: io :: OwnedHandle: AsRef<T>,
{
    fn as_ref(&self) -> &T {
        <std :: os :: windows :: io :: OwnedHandle as AsRef<T>>::as_ref(&self.inner)
    }
}
#[cfg(windows)]
impl From<std :: os :: windows :: io :: OwnedHandle> for OwnedHandle {
    fn from(value: std :: os :: windows :: io :: OwnedHandle) -> Self {
        Self { inner: value }
    }
}
#[cfg(windows)]
impl crate::Elaborate for std :: os :: windows :: io :: OwnedHandle {
    type Output = OwnedHandle;
    fn elaborate(self) -> Self::Output {
        self.into()
    }
}
#[cfg(windows)]
#[repr(transparent)]
pub struct OwnedSocket {
    pub(crate) inner: std :: os :: windows :: io :: OwnedSocket,
}
#[cfg(windows)]
impl OwnedSocket {
    pub fn to_inner(&self) -> &std :: os :: windows :: io :: OwnedSocket {
        &self.inner
    }
}
#[cfg(windows)]
impl OwnedSocket {
    pub fn into_inner(self) -> std :: os :: windows :: io :: OwnedSocket {
        self.inner
    }
}
#[cfg(windows)]
impl<T: ?Sized> AsRef<T> for OwnedSocket
where
    std :: os :: windows :: io :: OwnedSocket: AsRef<T>,
{
    fn as_ref(&self) -> &T {
        <std :: os :: windows :: io :: OwnedSocket as AsRef<T>>::as_ref(&self.inner)
    }
}
#[cfg(windows)]
impl From<std :: os :: windows :: io :: OwnedSocket> for OwnedSocket {
    fn from(value: std :: os :: windows :: io :: OwnedSocket) -> Self {
        Self { inner: value }
    }
}
#[cfg(windows)]
impl crate::Elaborate for std :: os :: windows :: io :: OwnedSocket {
    type Output = OwnedSocket;
    fn elaborate(self) -> Self::Output {
        self.into()
    }
}


#[cfg(windows)]
impl BorrowedHandle < '_ > {
pub fn try_clone_to_owned ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: os :: windows :: io :: OwnedHandle > ) {

    std :: os :: windows :: io :: BorrowedHandle :: < '_ > :: try_clone_to_owned(&self.inner)
        .map(Into::into)
        .with_context(|| crate::call_failed!(Some(&self.inner), "try_clone_to_owned"))
}
}

#[cfg(windows)]
impl BorrowedSocket < '_ > {
pub fn try_clone_to_owned ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < std :: os :: windows :: io :: OwnedSocket > ) {

    std :: os :: windows :: io :: BorrowedSocket :: < '_ > :: try_clone_to_owned(&self.inner)
        .map(Into::into)
        .with_context(|| crate::call_failed!(Some(&self.inner), "try_clone_to_owned"))
}
}

#[cfg(windows)]
impl OwnedHandle {
pub fn try_clone ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > ) {

    std :: os :: windows :: io :: OwnedHandle :: try_clone(&self.inner)
        .map(Into::into)
        .with_context(|| crate::call_failed!(Some(&self.inner), "try_clone"))
}
}

#[cfg(windows)]
impl OwnedSocket {
pub fn try_clone ( & self ) -> crate :: rewrite_output_type ! ( std :: io :: Result < Self > ) {

    std :: os :: windows :: io :: OwnedSocket :: try_clone(&self.inner)
        .map(Into::into)
        .with_context(|| crate::call_failed!(Some(&self.inner), "try_clone"))
}
}
